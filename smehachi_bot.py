import logging
import re
import os
import json
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.environ.get("TOKEN", "")
DATA_FILE = "smehachi.json"
HISTORY_FILE = "smehachi_history.json"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# --- –£—á–∞—Å—Ç–Ω–∏–∫–∏ ---
valid_names = ['–õ–∏–∑–∞', '–†—É—Å–ª–∞–Ω', '–ú–∏—à–∞', '–ù–∞—Å—Ç—è']

aliases = {
    '–õ–∏–∑–∞': ['–ª–∏–∑–∞', '–ª–∏–∑–µ', '–ª–∏–∑—É', '–ª–∏–∑—ã', '–ª–∏–∑–æ–π', '–ª–∏—Å–æ—á–∫–∞', '–ª–∏–∑–æ—á–∫–∞', '–¥–ª—è –ª–∏–∑—ã', '@karandashiki'],
    '–†—É—Å–ª–∞–Ω': ['—Ä—É—Å–ª–∞–Ω', '—Ä—É—Å–ª–∞–Ω—É', '—Ä—É—Å–ª–∞–Ω–∞', '—Ä—É—Å–ª–∞ÃÅ–Ω', '—Ä—É—Å–ª–∞–Ω–æ–º', '–¥–ª—è —Ä—É—Å–ª–∞–Ω–∞', '@ruslanzaydullin'],
    '–ú–∏—à–∞': ['–º–∏—à–∞', '–º–∏—à–µ', '–º–∏—à—É', '–º–∏—à–∏', '–º–∏—Ö–∞–∏–ª', '–º–∏—Ö–∞–∏–ª—É', '–º–∏—Ö–∞–∏–ª–∞', '–º–∏—Ö–∞–∏–ª–æ–º',
             '–º–∏–∏—à–∞', '–º–∏—à–∞–∏–ª', '–¥–ª—è –º–∏—à–∏', '–º—É–∂—É', 'michael', '@michaelkokin'],
    '–ù–∞—Å—Ç—è': ['–Ω–∞—Å—Ç—è', '–Ω–∞—Å—Ç–µ', '–Ω–∞—Å—Ç—é', '–Ω–∞—Å—Ç–∏–∏', '–Ω–∞—Å—Ç–∏', '–Ω–∞—Å—Ç–µ–π', '–∞–Ω–∞—Å—Ç–∞—Å–∏—è', '–∞–Ω–∞—Å—Ç–∞—Å–∏–∏',
              '–∞–Ω–∞—Å—Ç–∞—Å–∏–µ–π', '–Ω–∞—Å—Ç—ë–Ω–∞', '–Ω–∞—Å—Ç–µ–Ω–æ—á–∫–∞', '–Ω–∞—Å—Ç—é—à–∞', '–¥–ª—è –Ω–∞—Å—Ç–∏', 'nastya', '@mymichelleobama']
}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
def load_json(path):
    if os.path.exists(path):
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_json(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

smehachi = load_json(DATA_FILE)
smehachi_history = load_json(HISTORY_FILE)

# --- –ü–æ–∏—Å–∫ ---
def find_person(text):
    text = text.strip().lower().lstrip('@')
    for name, alias_list in aliases.items():
        if text in [a.strip().lower().lstrip('@') for a in alias_list]:
            return name
    return None

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def record_history(name, count):
    now = datetime.utcnow().isoformat()
    smehachi_history.setdefault(name, []).append({'count': count, 'time': now})
    save_json(HISTORY_FILE, smehachi_history)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é —Å–º–µ—Ö–∞—á–∏. –ü–∏—à–∏ '–¥–∞—é 3 —Å–º–µ—Ö–∞—á–∞ –õ–∏–∑–µ', '–º–∏–Ω—É—Å 2 –†—É—Å–ª–∞–Ω—É' –∏–ª–∏ '–ø–ª—é—Å 5 –ù–∞—Å—Ç–µ'.")

async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_users = sorted(smehachi.items(), key=lambda x: x[1], reverse=True)
    text = "üìä –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–º–µ—Ö–∞—á–µ–π:\n\n"
    for name, count in sorted_users:
        if name in valid_names:
            text += f"{name}: {count} —Å–º–µ—Ö–∞—á–µ–π\n"
    if update.message:
        await update.message.reply_text(text)

async def weekly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.utcnow()
    week_start = now - timedelta(days=now.weekday())
    weekly_scores = {name: 0 for name in valid_names}

    for name, records in smehachi_history.items():
        for r in records:
            time = datetime.fromisoformat(r['time'])
            if time >= week_start:
                weekly_scores[name] += r['count']

    sorted_users = sorted(weekly_scores.items(), key=lambda x: x[1], reverse=True)
    text = "üìÜ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"
    for name, count in sorted_users:
        text += f"{name}: {count} —Å–º–µ—Ö–∞—á–µ–π\n"
    if update.message:
        await update.message.reply_text(text)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–π ---
async def handle_smehachi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text
    sender = update.effective_user.first_name

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ
    match_add = re.search(r'(–æ—Ç–¥–∞—é|–¥–∞—é|–¥–∞—Ä—é|–ø–ª—é—Å|–∫–∏–¥–∞—é|–¥–µ—Ä–∂–∏|–æ—Ç—Å—ã–ª–∞—é)\s+(\d+)\s+—Å–º–µ—Ö–∞—á(?:–∞|–µ–π|–µ–π—á–∏–∫–æ–≤)?\s+(.+)', text, re.IGNORECASE)
    if match_add:
        count = int(match_add.group(2))
        target_raw = match_add.group(3)
        recipient = find_person(target_raw)
        if recipient and recipient != sender and recipient in valid_names:
            smehachi[recipient] = smehachi.get(recipient, 0) + count
            save_json(DATA_FILE, smehachi)
            record_history(recipient, count)
            if update.message:
                await update.message.reply_text(f"{recipient} –ø–æ–ª—É—á–∏–ª {count} —Å–º–µ—Ö–∞—á–µ–π! üéâ")
        return

    # –í—ã—á–∏—Ç–∞–Ω–∏–µ
    match_sub = re.search(r'(–º–∏–Ω—É—Å|–∑–∞–±–∏—Ä–∞—é|–≤—ã–ª–µ—Ç–∞–µ—Ç|–∑–∞–±—Ä–∞—Ç—å)\s+(\d+)\s+—Å–º–µ—Ö–∞—á(?:–∞|–µ–π|–µ–π—á–∏–∫–æ–≤)?(?:\s+—É)?\s+(.+)', text, re.IGNORECASE)
    if match_sub:
        count = int(match_sub.group(2))
        target_raw = match_sub.group(3)
        recipient = find_person(target_raw)
        if recipient and recipient in valid_names:
            smehachi[recipient] = smehachi.get(recipient, 0) - count
            save_json(DATA_FILE, smehachi)
            record_history(recipient, -count)
            if update.message:
                await update.message.reply_text(f"{recipient} –ª–∏—à–∏–ª—Å—è {count} —Å–º–µ—Ö–∞—á–µ–π! üò¨")
        return

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rating", rating))
    app.add_handler(CommandHandler("weekly", weekly))
    app.add_handler(MessageHandler(filters.TEXT, handle_smehachi))

    app.run_polling()

if __name__ == '__main__':
    main()
